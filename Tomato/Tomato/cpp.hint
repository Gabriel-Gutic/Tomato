// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984
#define Vec4cpp(Name, Type) Name##4::Name##4(Type x, Type y, Type z, Type w) :x(x), y(y), z(z), w(w) { } Name##4::Name##4(Type x, const Name##2& f, Type w) : x(x), y(f.x), z(f.y), w(w) { } Name##4::Name##4(const Name##2& f1, const Name##2& f2) : xy(f1), zw(f2) { } Name##4::Name##4(const Name##3& f, Type w) : x(f.x), y(f.y), z(f.z), w(w) { } Name##4::Name##4(Type x, const Name##3& f) : x(x), y(f.x), z(f.y), w(f.z) { } Name##4::Name##4(const Name##4& f) : xy(f.xy), zw(f.zw) { } std::string Name##4::ToString() const { std::stringstream ss; ss << "(" << x << ", " << y << ", " << z << ", " << w << ")"; return ss.str(); } Type Name##4::DotProduct(const Name##4& f1, const Name##4& f2) { return f1.x * f2.x + f1.y * f2.y + f1.z * f2.z + f1.w * f2.w; } Name##4& Name##4::operator=(const Name##4& other) { if (this == &other) return *this; data = other.data; return *this; } bool Name##4::operator==(const Name##4& other) const { return x == other.x && y == other.y && z == other.z && w == other.w; } bool Name##4::operator!=(const Name##4& other) const { return !(x == other.x && y == other.y && z == other.z && w == other.w); } Name##4 Name##4::operator+(const Name##4& other) const { return Name##4(x + other.x, y + other.y, z + other.z, w + other.w); } Name##4& Name##4::operator+=(const Name##4& other) { *this = *this + other; return *this; } Name##4 Name##4::operator-(const Name##4& other) const { return Name##4(x - other.x, y - other.y, z - other.z, w - other.w); } Name##4& Name##4::operator-=(const Name##4& other) { *this = *this - other; return *this; } Name##4 Name##4::operator*(const Name##4& other) const { return { x * other.x, y * other.y, z * other.z, w * other.w }; } Name##4& Name##4::operator*=(const Name##4& other) { *this = *this * other; return *this; } Type& Name##4::operator[](size_t index) { return list[index]; } const Type& Name##4::operator[](size_t index) const { return list[index]; } Name##4 operator*(const Name##4& f4, Type dot) { return Name##4(f4.x * dot, f4.y * dot, f4.z * dot, f4.w * dot); } Name##4& operator*=(Type dot) { *this = dot * *this; return *this; } Name##4 operator*(Type dot, const Name##4& f4) { return f4 * dot; } std::ostream& operator<<(std::ostream& os, const Name##4& f4) { os << f4.ToString(); return os; } Type* Name##4::ToPtr() { return &x; } const Type* Name##4::ToPtr() const { return &x; }
